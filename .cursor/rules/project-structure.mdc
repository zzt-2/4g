---
description: 
globs: 
alwaysApply: false
---
# 项目结构

## 主要目录结构

```
项目根目录
├── src/                         # 前端源代码
│   ├── assets/                  # 静态资源
│   ├── boot/                    # 启动相关代码
│   ├── components/              # 公共组件
│   ├── composables/             # 可组合函数
│   ├── config/                  # 配置文件
│   ├── css/                     # CSS样式
│   ├── layouts/                 # 布局组件
│   ├── pages/                   # 页面组件
│   ├── router/                  # 路由配置
│   ├── stores/                  # 状态管理
│   ├── types/                   # 类型定义
│   ├── utils/                   # 工具函数
│   │   └── electronApi.ts       # Electron API 封装
│   ├── App.vue                  # 应用入口组件
│   └── env.d.ts                 # 环境类型声明
│
└── src-electron/                # Electron相关代码
    ├── icons/                   # 应用图标
    ├── main/                    # 主进程代码
    │   └── ipc/                 # IPC 处理程序
    │       ├── framesHandlers.ts    # 帧配置处理程序
    │       ├── sendFramesHandlers.ts # 发送帧处理程序
    │       ├── serialHandlers.ts     # 串口处理程序
    │       └── index.ts         # IPC 处理程序注册
    ├── preload/                 # 预加载脚本
    │   ├── api/                 # API 定义
    │   │   ├── frames.ts        # 帧配置 API
    │   │   ├── sendFrame.ts     # 发送帧 API
    │   │   ├── serial.ts        # 串口 API
    │   │   └── index.ts         # API 汇总导出
    │   └── index.ts             # 预加载脚本入口
    ├── types/                   # Electron类型定义
    │   └── electron-api.d.ts    # 预加载 API 类型定义
    ├── WindowState.ts           # 窗口状态管理
    └── electron-env.d.ts        # Electron环境类型声明
```

## 前端目录结构说明 (src/)

### 组件目录 (components/)

包含可复用的UI组件，按功能模块组织：

- `common/` - 通用基础组件
- `frames/` - 数据帧相关组件
- `serial/` - 串口相关组件
- `layout/` - 布局相关组件

### 页面目录 (pages/)

包含应用的页面组件，每个页面一个子目录：

- `home/` - 首页
- `serial/` - 串口监控页面
- `frames/` - 帧配置页面
- `settings/` - 设置页面

### 状态管理 (stores/)

使用Pinia的状态管理，每个功能模块一个store文件：

- `serial.ts` - 串口相关状态
- `frames.ts` - 帧配置状态
- `settings.ts` - 应用设置状态

### 布局目录 (layouts/)

定义应用的整体布局结构，可能包含：

- `MainLayout.vue` - 主布局组件
- `EmptyLayout.vue` - 空布局组件

### 可组合函数 (composables/)

包含可重用的逻辑功能，如：

- `useSerialPort.ts` - 串口操作逻辑
- `useFrameEditor.ts` - 帧编辑逻辑
- `useTheme.ts` - 主题切换逻辑

### 类型定义 (types/)

TypeScript类型定义，按功能模块组织：

- `frames/` - 帧相关类型
  - `sendInstances.ts` - 发送帧实例类型
- `serial/` - 串口相关类型
  - `serial.ts` - 串口配置和状态类型
- `common.ts` - 通用类型

### 工具函数 (utils/)

通用辅助函数，处理数据格式化、验证等功能：

- `serialHelpers.ts` - 串口辅助函数
- `formatters.ts` - 数据格式化
- `validators.ts` - 数据验证
- `electronApi.ts` - Electron API 的安全封装

## Electron目录结构说明 (src-electron/)

### 主进程代码 (main/)

Electron主进程的代码，包含：

- `index.ts` - 主进程入口
- `ipc/` - IPC通信处理
  - `framesHandlers.ts` - 处理帧配置相关IPC请求
  - `sendFramesHandlers.ts` - 处理发送帧实例相关IPC请求
  - `serialHandlers.ts` - 处理串口相关IPC请求
  - `windowHandlers.ts` - 处理窗口操作相关IPC请求
  - `menuHandlers.ts` - 处理菜单相关IPC请求
  - `index.ts` - 统一注册所有IPC处理函数

### 预加载脚本 (preload/)

用于在渲染进程中暴露主进程功能的预加载脚本：

- `index.ts` - 预加载入口，使用contextBridge暴露API
- `api/` - API定义目录
  - `frames.ts` - 帧配置API
  - `sendFrame.ts` - 发送帧API
  - `serial.ts` - 串口操作API
  - `window.ts` - 窗口操作API
  - `menu.ts` - 菜单操作API
  - `index.ts` - 汇总所有API并导出

### 类型定义 (types/)

Electron相关的TypeScript类型定义：

- `electron-api.d.ts` - 定义预加载API的全局类型，使渲染进程可以访问

### 图标和资源 (icons/)

应用图标和其他Electron特定资源：

- 不同分辨率的应用图标
- 托盘图标
- 其他Electron特定资源