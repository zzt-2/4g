---
description: 
globs: 
alwaysApply: false
---
# 项目文件修改规则

> 基于文档体系的自动化修改流程

## 快速修改流程

### 提示词模板
```
修改 [文件路径] - [修改类型]
自动分析影响并执行修改
```

### 执行步骤（自动化）
1. **依赖查询** - 在`文件依赖关系图.md`中查找该文件的dependencies和impacts
2. **影响评估** - 根据impact_level和modification_triggers确定检查范围  
3. **接口确认** - 在`文件功能接口索引.md`中确认修改涉及的接口
4. **规则执行** - 应用`自动化修改规则.md`中的相应模式
5. **同步修改** - 自动修改相关文件
6. **结果报告** - 总结修改内容和验证状态

## 高效查询策略

### 1. 精确路径定位
```yaml
# 示例：修改 types/frames/basic.ts
查询: "types/frames/basic.ts:" 在文件依赖关系图.md
结果: dependencies + impacts + impact_level + modification_triggers
```

### 2. 影响级别过滤
- **critical** → 检查所有impacts文件
- **high** → 检查核心impacts文件  
- **medium** → 检查直接impacts文件
- **low** → 仅检查必要文件

### 3. 修改类型匹配
```yaml
enum_change → 检查switch/case语句 + UI选项
state_change → 检查storeToRefs + action调用
interface_change → 检查导入语句 + 类型注解
```

## 传统检查流程（备用）

### 1. 确定文件类型和影响范围

- **types/** = 极高影响
- **stores/** = 高影响
- **utils/** = 高影响
- **components/** = 中影响
- **pages/** = 中影响
- **composables/** = 中影响

### 2. 按影响等级执行检查

#### 极高影响文件修改
1. 检查所有导入该类型的文件
2. 验证接口实现和类型断言
3. 确认默认值和初始化代码

#### 高影响文件修改
1. 检查状态引用和方法调用
2. 验证API调用和错误处理
3. 确认数据格式和转换逻辑

#### 中影响文件修改
1. 检查直接引用该文件的父子组件
2. 验证Props、Emits和事件处理
3. 确认相关页面和路由配置

## 依赖方向原则

```
types/ → stores/utils/ → composables/ → components/ → pages/
```

**避免反向依赖和循环引用**

## 核心原则

1. **类型优先**：修改类型文件需要最全面检查
2. **模块内聚**：同模块文件通常相互影响
3. **自下而上**：按依赖层级进行影响分析
4. **测试验证**：每次修改后必须功能验证

## 开发实践指导

1. **需求导向**：严格按需求实现，不做功能性扩展
2. **向前兼容**：不考虑后向兼容，出现问题继续修改解决
3. **简化错误处理**：仅在关键处使用try-catch，避免每层都包裹
4. **代码复用**：实现前先检查现有功能，避免重复造轮子

## Token优化原则

### 🔥 高效查询
- 使用文件路径精确匹配，不全文搜索
- 按impact_level分层处理，避免过度检查
- 利用modification_triggers精确定位检查内容

### 🔥 批量处理
- 同一影响链的文件一次性修改
- 使用预定义模板减少重复生成
- 按优先级排序，关键修改优先

### 🔥 智能跳过
- low影响文件仅在必要时检查
- 已知兼容的修改直接跳过
- 使用缓存避免重复分析

## 自动化修改规则简化版

### 类型文件修改
```
模式: types/**/*.ts 修改
检查: dependencies中的文件 + impacts中critical和high级别文件
修改: 导入语句 + 类型注解 + switch/case分支
验证: TypeScript编译检查
```

### Store文件修改  
```
模式: stores/**/*.ts 修改
检查: impacts中的Composable和组件文件
修改: storeToRefs解构 + action调用 + state访问
验证: 运行时状态检查
```

### 组件文件修改
```
模式: components/**/*.vue 修改
检查: impacts中的父组件和页面
修改: props传递 + 事件处理 + 组件标签
验证: UI渲染检查
```

## 检查清单模板

### 修改前必查
- [ ] 确定影响范围和级别
- [ ] 使用IDE查找所有引用位置
- [ ] 检查导入导出语句
- [ ] 验证类型定义匹配

### 修改后验证
- [ ] 运行 `npx tsc --noEmit` 类型检查
- [ ] 运行 `npx eslint` 代码检查
- [ ] 测试相关功能是否正常
- [ ] 确认用户界面无异常

## 实际使用示例

### 示例1：修改基础类型
```
输入: 修改 types/frames/basic.ts 添加新的FieldType枚举值
自动执行:
1. 查询依赖图 → 发现impact_level: critical
2. 检查impacts列表中的所有文件
3. 应用enum_change修改模式
4. 更新switch/case、UI选项、类型导入
5. 验证TypeScript编译
```

### 示例2：修改Store状态
```
输入: 修改 stores/serialStore.ts 添加新的state属性
自动执行:  
1. 查询依赖图 → 发现impact_level: critical
2. 检查impacts中的组件和页面
3. 应用state_change修改模式
4. 更新storeToRefs解构和状态访问
5. 验证功能正常
```

## 错误处理简化

### 修改失败时
1. 记录失败的文件和原因
2. 继续处理其他文件
3. 最后统一报告问题清单

### 依赖冲突时
1. 标记冲突文件
2. 应用适配器模式
3. 建议手动检查项

## 修改规则

我要修改文件中的内容时，请：
1. 根据依赖关系图找出需要检查的相关文件
2. 检查这些文件是否需要同步修改
3. 执行必要的自动修改
4. 报告修改摘要和验证结果

使用自动化修改规则，不需要询问，直接执行。

## 成功标准

- ✅ 所有impact文件检查完成
- ✅ TypeScript编译无错误  
- ✅ 核心功能验证通过
- ✅ 修改摘要清晰完整

## 使用方法

**标准命令**：
```
修改 [文件路径] - [具体修改内容]
```

**快速命令**：
```
[文件路径] [修改类型]
```

系统将自动：查询依赖 → 分析影响 → 执行修改 → 验证结果 → 报告摘要

